#!/bin/bash -

script="$0"

#{{{ Functions
#{{{ (*) usage

# Print a brief help page and exit with exit value $1
# usage 101

function usage { echo "\
Usage:  $script [-fh] [-b branch] [-d dir] release

Options:
  -h        show this info

  -b branch branch to copy.  Default is develop.

Release a git version.

"; exit $1 ; }

#}}}
#{{{ (*) require_clean_work_tree

require_clean_work_tree () {
    # Update the index
    git update-index -q --ignore-submodules --refresh
    err=0

    # Disallow unstaged changes in the working tree
    if ! git diff-files --quiet --ignore-submodules --
    then
        echo >&2 "cannot $1: you have unstaged changes."
        git diff-files --name-status -r --ignore-submodules -- >&2
        err=1
    fi

    # Disallow uncommitted changes in the index
    if ! git diff-index --cached --quiet HEAD --ignore-submodules --
    then
        echo >&2 "cannot $1: your index contains uncommitted changes."
        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2
        err=1
    fi

    if [ $err = 1 ]
    then
        echo >&2 "Please commit or stash them."
        exit 1
    fi
}

#}}}
#}}}
#{{{ Process arguments

branch=develop
dir=
force=0

while getopts ":b:h" opt; do
    case "$opt" in
	b  ) branch="$OPTARG" ;;
	h  ) usage 0   ;;
	?  ) usage 101 ;;
    esac
done

shift $(($OPTIND-1))
version=$1

if ! [[ $version =~ [0-9.-]+ ]]; then
    echo "version number, $version, has improper format."
    exit 1
fi

#}}}
#{{{ Release

require_clean_work_tree release

git checkout release
git merge --no-ff --message="merge branch '$branch' into release" $branch
bin/version $version
git commit --message="prepare release" -a
git tag --force --message="prepare release" "release-$version"
git checkout master
git merge --no-ff --message="merge branch 'release'" release
git checkout $branch
git merge --no-ff --message="merge branch 'master' into $branch" master

#}}}

exit 0
